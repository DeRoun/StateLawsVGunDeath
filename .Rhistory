# created. Remember to save this as a variable (or in the same one!)
arrange(flights, gained)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
arrange(flights, gained)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
flights <- flights %>%
mutate(gained = arr_delay - dep_delay)
arrange(-gained)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, gained)
flights <- flights %>%
mutate(gained = arr_delay - dep_delay)
arrange(-gained)
flights <- flights %>%
mutate(gained = arr_delay - dep_delay)
arrange(gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, gained)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables and reload the library
# to "reset" it.
flights <- flights %>%
mutate(gained = arr_delay - dep_delay)
arrange(gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
library("dplyr")
# load library
library("nycflights13")
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained in the air
flights <- mutate(flights, gained = arr_delay - dep_delay)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, gained)
flights <- flights %>%
mutate(gained = arr_delay - dep_delay)
arrange(gained)
# Make a histogram of the amount of time gained using the `hist()` function
hist(flights$gained)
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, mean = mean(flights$gained, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- flights %>% mutate(origin, destination, gained) %>% filter(destination == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- flights %>% select(origin, destination, gained) %>% filter(destination == "SEA")
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain" column you just created
to.sea <- flights %>% select(origin, dest, gained) %>% filter(dest == "SEA")
dep.delay.by.month <- group_by(month) %>%
summarize(
mean(delay)
)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
dep.delay.by.month <- group_by(month) %>%
summarize(
mean(delay)
)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
dep.delay.by.month <- group_by(month) %>%
summarize(
mean(delay)
)
dep.delay.by.month <- group_by(flights, onth) %>%
summarize(
mean(delay)
)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
dep.delay.by.month <- group_by(flights, onth) %>%
summarize(
mean(delay)
)
dep.delay.by.month <- group_by(flights, month) %>%
summarize(
mean(delay)
)
dep.delay.by.month <- group_by(flights, month) %>%
summarize(
mean(dep_delay)
)
dep.delay.by.month
dep.delay.by.month <- group_by(flights, month) %>%
summarize(
mean = mean(dep_delay)
)
dep.delay.by.month
dep.delay.by.month <- group_by(flights, month)
# What was the average department delay in each month?
# Save this as a data frame `dep.delay.by.month`
# Hint: you'll have to perform a grouping operation before summarizing your data
dep.delay.by.month <- group_by(flights, month) %>% summarize(mean = mean(dep_delay))
dep.delay.by.month
View(flights)
dep.delay.by.month <- group_by(flights, month) %>%
summarize(mean = mean(dep_delay, na.rm=TRUE))
dep.delay.by.month
# Which month had the greatest average departure delay?
filter(dep.delay.by.month, mean == max(mean))
# If your above data frame contains just two columns (e.g., "month", and "delay"
# in that order), you can create a scatterplot by passing that data frame to the
# 'plot()' function
plot(dep.delay.by.month)
arr.delay.by.dest <- group_by(flights, dest) %>%
summarize(mean = mean(arr_delay, na.rm=TRUE)) %>%
filter(mean == max(mean))
arr.delay.by.dest
arr.delay.by.dest <- group_by(flights, dest)
arr.delay.by.dest <- group_by(flights, dest) %>%
summarize(mean = mean(arr_delay, na.rm=TRUE)) %>%
filter(mean == max(mean))
arr.delay.by.dest
View(arr.delay.by.dest)
arr.delay.by.dest <- group_by(flights, dest) %>%
summarize(mean = mean(arr_delay, na.rm=TRUE))
filter(arr.delay.by.dest, mean == max(mean))
View(arr.delay.by.dest)
filter(arr.delay.by.dest, mean == max(mean))
filter(arr.delay.by.dest, mean == max(mean))
View(arr.delay.by.dest)
arr.delay.by.dest <- filter(arr.delay.by.dest, mean == max(mean))
View(arr.delay.by.dest)
# Install the `nycflights13` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
#install.packages("nycflights13")  # should be done already
library(nycflights13)
library(dplyr)
avg.arr.delay.dest <- group_by(flights, dest) %>%
summarize(avg.arr.delay = mean(arr_delay))
View(avg.arr.delay.dest)
avg.arr.delay.dest <- group_by(flights, dest) %>%
summarize(avg.arr.delay = mean(arr_delay, na.rm=TRUE))
View(avg.arr.delay.dest)
left_join(avg.arr.delay.dest, airports)
left_join(airports, avg.arr.delay.dest)
View(airports)
#load the Any Drinking data
any.drinking <- read.csv("data/any_drinking.csv", stringsAsFactors=FALSE)
#extract a data frame sl.2012 that has the state & location columns, as well as
#the columns with data from 2012
sl.2012 <- select(any.drinking, state, location, both_sexes_2012, females_2012, males_2012)
#add a column diff to the new data frame sl.2012 that has the differenc between
#male and female drinking amounts in 2012
sl.2012 <- mutate(sl.2012, diff = males_2012 - females_2012)
#print out the statement indicating the number of locations where females drink more than males
zero.diff <- filter(sl.2012, diff < 0)
l.more.female <- paste("Females drank more than males in", nrow(zero.diff), "locations")
print(l.more.female)
#print out the statement indicating the location in which male and female drinking
#percentages are the closest
l.closest.pct <- filter(sl.2012, diff == min(diff)) %>%
select(state, location)
print(paste("Drinking is most similar between genders in ", l.closest.pct$location, ", ", l.closest.pct$state, sep = ""))
#create a new data frame state.2012 that is only the state level observations from the 2012 data frame sl.2012
state.2012 <- group_by(sl.2012, state) %>%
filter(state == location)
View(state.2012)
library(dplyr)
#load the Any Drinking data
any.drinking <- read.csv("data/any_drinking.csv", stringsAsFactors=FALSE)
#extract a data frame sl.2012 that has the state & location columns, as well as
#the columns with data from 2012
sl.2012 <- select(any.drinking, state, location, both_sexes_2012, females_2012, males_2012)
#add a column diff to the new data frame sl.2012 that has the differenc between
#male and female drinking amounts in 2012
sl.2012 <- mutate(sl.2012, diff = males_2012 - females_2012)
#print out the statement indicating the number of locations where females drink more than males
zero.diff <- filter(sl.2012, diff < 0)
l.more.female <- paste("Females drank more than males in", nrow(zero.diff), "locations")
print(l.more.female)
#print out the statement indicating the location in which male and female drinking
#percentages are the closest
l.closest.pct <- filter(sl.2012, diff == min(diff)) %>%
select(state, location)
print(paste("Drinking is most similar between genders in ", l.closest.pct$location, ", ", l.closest.pct$state, sep = ""))
#create a new data frame state.2012 that is only the state level observations from the 2012 data frame sl.2012
state.2012 <- group_by(sl.2012, state) %>%
filter(state == location)
View(state.2012)
#################
#### PART 1 #####
#################
library(dplyr)
#load the Any Drinking data
any.drinking <- read.csv("data/any_drinking.csv", stringsAsFactors=FALSE)
install.packages("httr")
install.packages("jsonlite")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
library("httr")
library("jsonlite")
library("dplyr")
# Load the httr and jsonlite libraries for accessing data
# You can also load `dplyr` if you wish to use it
install.packages("httr")
install.packages("httr")
library("httr")
library("jsonlite")
library("dplyr")
# Create a variable for the API's base URI (https://api.github.com)
base.URI <- "https://api.github.com"
# Under the "Repositories" category, find the endpoint that will list repos in
# an organization
# Create a variable `resource` that represents the endpoint for the course
# organization (you can use `paste0()` to construct this, or enter it manually)
resource <- "/orgs/info201/repos"
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
GET(paste0(base.URI, resource))
# Convert the body from JSON into a data frame
body <- content(response, "text")
# Convert the body from JSON into a data frame
body <- content(resource, "text")
# Convert the body from JSON into a data frame
body <- content(resource, "text")
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
GET(paste0(base.URI, resource))
# Send a GET request to this endpoint (the base.uri followed by the resource)
# and extract the response body
response <- GET(paste0(base.URI, resource))
body <- content(resource, "text")
body <- content(response, "text")
# Convert the body from JSON into a data frame
info.repo <- fromJSON(body)
# How many (public) repositories does the organization have?
nrow(info.repo)
# Use a "Search" endpoint to search for repositories about "visualization" whose
# language includes "R"
# Reassign the `resource` variable to refer to the appropriate resource.
resource <- "/search/repositories"
# You will need to specify some query parameters. Create a `query.params` list
# variable that specifies an appropriate key and value for the search term and
# the language
query.params <- list(q = "visualization", language = "R")
# Send a GET request to this endpoint--including your params list as the `query`.
# Extract the response body and convert it from JSON.
response <- GET(passte0(base.URI, resource), query = query.params)
# Send a GET request to this endpoint--including your params list as the `query`.
# Extract the response body and convert it from JSON.
response <- GET(paste0(base.URI, resource), query = query.params)
body <- content(response, "text")
result <-fromJSON(body)
# How many search repos did your search find? (Hint: check the list names)
nrow(result)
# How many search repos did your search find? (Hint: check the list names)
nrow(result$name)
# How many search repos did your search find? (Hint: check the list names)
nrow(result$names)
# How many search repos did your search find? (Hint: check the list names)
nrow(result$total_count)
# What are the full names of the top 5?
vis.repo.names <- results$items$full_name[1:5]
# What are the full names of the top 5?
vis.repo.names <- result$items$full_name[1:5]
print(vis.repo.names)
# Find an appropriate endpoint to query for statistics about a particular repo,
# and use it to get a list of contributors to the `tidyverse/dplyr` repository.
# Who were the top 10 contributor in terms of number of total commits?
# NOTE: This will be a really big response with lots of data!
resource <- "/repos/tindyverse/dyplyr/stats/contributors"
response <- GET(paste0(base.URI, resource))
body <- content(response, "text")
result <- flatten(fromJSON(body))
result <- flatten(fromJSON(content(response, "text")))
resource <- "/repos/tindyverse/dyplyr/stats/contributors"
response <- GET(paste0(base.URI, resource))
body <- content(response, "text")
result <- flatten(JSON(body))
result <- flatten(fromJSON(body))
resource <- '/repos/tidyverse/dplyr/stats/contributors'
response <- GET(paste0(base.uri, resource))
result <- flatten(fromJSON(content(response, "text")))
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.uri, resource))
result <- flatten(fromJSON(content(response, "text")))
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.uri, resource))
result <- flatten(fromJSON(content(response, "text")))
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.uri, resource))
result <- flatten(fromJSON(content(response, "text")))
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.uri, resource))
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.URI, resource))
result <- flatten(fromJSON(content(response, "text")))
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
contributors <- select(result, author.login, total) %>% arrange(-total)
print(contributors[1:10])
contributors <- select(result, author$login, total) %>% arrange(-total)
contributors <- select(result, author$login, total) %>% arrange(-total)
contributors <- result %>% select(author$login, total) %>% arrange(-total)
print(contributors[1:10])
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
resource <- "/repos/tidyverse/dplyr/stats/contributors"
response <- GET(paste0(base.URI, resource))
result <- flatten(fromJSON(content(response, "text")))
contributors <- result %>% select(author, total) %>% arrange(-total)
print(contributors[1:10])
result <- flatten(fromJSON(content(response, "text")))
result
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
print(contributors[1:5])
print(contributors[1:10])
contributors <- result %>% select(author.login) %>% arrange(-total)
contributors <- result %>% select(author.login, total) %>% arrange(-total)
print(contributors[1:10])
print(contributors[1,2])
print(contributors[1:10])
install.packages("tidyr")
library("maps")
library("ggplot2")
library("maps")
library("ggplot2")
library("maps")
library("maps")
install.packages("shiny")
library("shiny")
shinyApp(ui = my.ui, server = my.server)
my.ui <- fluidPage(
h1("hello shiny")
)
my.server <- function(input, output){
}
shinyApp(ui = my.ui, server = my.server)
shinyApp(ui = my.ui, server = my.server)
# Install and load the `shiny` package
# install.packages("shiny")
install.packages("shiny")
library("shiny")
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a new `ui` variable. This variable should be assigned a `fluidPage()` layout
# The `fluidPage()` layout should be passed the following:
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(input$price * input$quantity)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, sever = server)
# Define a `server` function (with appropriate arguments)
# This function should perform the following:
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(input$price * input$quantity)
})
}
library("shiny")
ui <- fluidPage(
# A `titlePanel()` layout with the text "Cost Calculator"
titlePanel("Cost Calculator"),
# A `numericInput()` widget with the label "Price (in dollars)"
# It should have a default value of 0 and a minimum value of 0
# Hint: look up the function's arguments in the documentation!
numericInput("price", label = "Price (in dollars)", value = 0, min = 0),
# A second `numericInput()` widget with the label "Quantity"
# It should have a default value of 1 and a minimum value of 1
numericInput("quantity", label = "Quantity", value = 1, min = 1),
# The word "Cost", strongly bolded
strong("Cost"),
# A `textOutput()` output of a calculated value labeled `cost`
textOutput("cost")
)
server <- function(input, output){
# Assign a reactive `renderText()` function to the output's `cost` value
# The reactive expression should return the input `price` times the `quantity`
# So it looks nice, paste a "$" in front of it!
output$cost <- renderText({
return(input$price * input$quantity)
})
}
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, sever = server)
runApp('School Work/2018 WINTER/INFO201/ch16-shiny/exercise-1')
install.packages("shiny")
runApp('School Work/2018 WINTER/INFO201/ch16-shiny/exercise-1')
# Install and load the `shiny` package
# install.packages("shiny")
library("shiny")
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, sever = server)
# Create a new `shinyApp()` using the above ui and server
shinyApp(ui = ui, server = server)
runApp('School Work/2018 WINTER/INFO201/ch16-shiny/exercise-1')
setwd("~/School Work/2018 WINTER/INFO201/StateLawsVGunDeath")
suppressPackageStartupMessages(library(dplyr))
# Creates variable with raw Firearm Law Data
orig.GL <- read.csv(file = "data/raw_state_gun_laws_data.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Creates variable with raw Gun Death Data
orig.CDC <- read.csv(file = "data/raw_cdc_gun_deaths.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Simplifies CDC gun death data
simplify.CDC <- select(orig.CDC, State, Year, Deaths, Population)
# Simplifies firearm law data
simplify.GL <- select(orig.GL, State = state, Year = year, LawTotal = lawtotal)
# Combines CDC and Gun law datasets by state and year
combined.df <- left_join(simplify.CDC, simplify.GL)
# Adds a "All States" state category that takes the combined total of all states for that year.
allStates.df <- combined.df %>%
group_by(Year) %>%
summarise(Deaths = sum(Deaths), Population = sum(Population),
LawTotal = sum(LawTotal, na.rm=TRUE)) %>%
mutate(State = "All States")
# Adds the new "All States" rows to the combined data frame and creates a Rate column
# of the rate of death per 100,000 people
final.df <- full_join(combined.df, allStates.df) %>%
mutate(Rate = round(Deaths / Population * 100000, digits = 2))
# Vectors and other variables to be used in Shiny
year.vec <- c(allStates.df$Year)
############################################################
######################## NO SUICIDE ########################
############################################################
# Creates variable with raw Gun Death Data (NO SUICIDE)
orig.CDC.ns <- read.csv(file = "data/raw_cdc_gun_deaths_ns.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Simplifies CDC gun death data (NO SUICIDE)
simplify.CDC.ns <- select(orig.CDC.ns, State, Year, Deaths, Population)
# Combines CDC and Gun law datasets by state and year (NO SUICIDE)
combined.df.ns <- left_join(simplify.CDC.ns, simplify.GL)
# Adds a "All States" state category that takes the combined total of all states for that year.
# (NO SUICIDE)
allStates.df.ns <- combined.df.ns %>%
group_by(Year) %>%
summarise(Deaths = sum(Deaths), Population = sum(Population),
LawTotal = sum(LawTotal, na.rm=TRUE)) %>%
mutate(State = "All States")
# Adds the new "All States" rows to the combined data frame and creates a Rate column
# of the rate of death per 100,000 people (NO SUICIDE)
final.df.ns <- full_join(combined.df.ns, allStates.df.ns) %>%
mutate(Rate = round(Deaths / Population * 100000, digits = 2))
setwd("~/School Work/2018 WINTER/INFO201/StateLawsVGunDeath")
