MakeIntroduction <- return("Hello, my name is " my.name " and I'm " my.age " years old.")
MakeIntroduction <- function(my.name, my.age) {
my.intro <- print("Hello, my name is " my.name " and I'm " my.age " years old.")
return (my.intro)
}
MakeIntroduction <- function(my.name, my.age) {
my.intro <- print("Hello, my name is " my.name " and I'm " my.age " years old.")
return (my.intro)
}
MakeIntroduction <- function( name, age) {
intro <- paste("Hello, my name is ", name ," and I'm ", age ," years old.")
return (intro)
}
my.age <- 19
my.name <- "De'Roun Williams"
MakeIntroduction <- function( name, age) {
intro <- paste("Hello, my name is ", name ," and I'm ", age ," years old.")
return (intro)
}
my.intro <- MakeIntroduction(my.name, my.age)
print (my.intro)
capital.intro <- str_to_title(my.intro)
# Introductions
install.packages("stringr")
library("stringr")
capital.intro <- str_to_title(my.intro)
my.intro <- MakeIntroduction(my.name, my.age)
print (my.intro)
casual.intro <- sub("Hello, my name is", "Hey, I'm", my.intro)
print(casual.intro)
capital.intro <- str_to_title(my.intro)
print(capital.intro)
my.intro <- MakeIntroduction(my.name, my.age)
print (my.intro)
MakeIntroduction <- function( name, age) {
intro <- paste("Hello, my name is",name,"and I'm",age,"years old.")
return (intro)
}
my.intro <- MakeIntroduction(my.name, my.age)
print (my.intro)
MakeIntroduction <- function( name, age) {
intro <- paste("Hello, my name is", name ,"and I'm", age ,"years old.")
return (intro)
}
my.intro <- MakeIntroduction(my.name, my.age)
print (my.intro)
capital.intro <- str_to_title(my.intro)
print(capital.intro)
intro.e.count <- str_count(my.intro, "e")
print (intro.e.count)
books <- c("The Philosopher's Stone","The Chamber of Secrets",
"The Prisoner of Azkaban","The Goblet of Fire",
"The Order of the Phoenix","The Half-Blood Prince")
print(books)
top.three.books <- books[1,2,3]
books <- c("The Philosopher's Stone","The Chamber of Secrets",
"The Prisoner of Azkaban","The Goblet of Fire",
"The Order of the Phoenix","The Half-Blood Prince")
print(books)
top.three.books <- books[c(1,2,3)]
books <- c("The Philosopher's Stone","The Chamber of Secrets",
"The Prisoner of Azkaban","The Goblet of Fire",
"The Order of the Phoenix","The Half-Blood Prince")
print(books)
top.three.books <- books[c(1,2,3)]
print(top.three.books)
book.reviews <- paste(books, "is a great read!")
book.reviews <- paste(books, "is a great read!")
print(book.reviews)
book.without.four <- RemoveBook(books, 4)
RemoveBook <- fuction (book.vector, book.index){
removal <- books.vector[-book.index]
return (removal)
}
book.without.four <- RemoveBook(books, 4)
RemoveBook <- fuction (book.vector, book.index){
removal <- books.vector[-book.index]
return (removal)
}
book.without.four <- RemoveBook(books, 4)
RemoveBook <- function(book.vector, book.index){
removal <- books.vector[-book.index]
return (removal)
}
book.without.four <- RemoveBook(books, 4)
RemoveBook <- function(book.vector, book.index){
removal <- book.vector[-book.index]
return (removal)
}
book.without.four <- RemoveBook(books, 4)
RemoveBook <- function(book.vector, book.index){
removal <- book.vector[-book.index]
return (removal)
}
book.without.four <- RemoveBook(books, 4)
print (book.without.four)
long.titles <- books[nchar(books) > 15]
long.titles <- books[nchar(books) > 15]
print (long.titles)
long.titles <- books[nchar(books) > 2]
print (long.titles)
long.titles <- books[nchar(books) > 2]
print (long.titles)
long.titles <- books[nchar(books) < 2]
print (long.titles)
long.titles <- books[nchar(books) > 55]
print (long.titles)
long.titles <- books[nchar(books) > 15]
print (long.titles)
book.without.four <- RemoveBook(books, 4)
print (book.without.four)
squared.numbers <- numbers^2
numbers <- seq(1,201)
squared.numbers <- numbers^2
#
numbers <- seq(1,201)
squared.numbers <- numbers^2
squared.mean <- mean(squared.numbers)
print (squared.mean)
squares <- numbers[sqrt (numbers) == round(sqrt (numbers))]
print (squares)
today <- Sys.Date()
spring.break <- as.Date ("March 17, 2018")
print (spring.break)
#
spring.break <- as.Date ("March 17, 2018")
spring.break <- as.Date ( "March 17, 2018", "%m/%d/%y")
print (spring.break)
spring.break <- as.Date ( "March 17, 2018", "%Y-%m-%d")
print (spring.break)
spring.break <- as.Date ( "2018-03-17", "%Y-%m-%d")
print (spring.break)
days.to.break <- spring.break - today
print(days.to.break)
days.to.break <- spring.break - today
print(days.to.break)
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (my.intro, "In {N} days I'll be {NEW.AGE}")
}
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (MakeIntroduction(name, age), "In", my.birthday - today ,"days I'll be", my.age + 1)
}
print (MakeBirthdayIntro())
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (MakeIntroduction(name, age), "In", my.birthday - today ,"days I'll be", my.age + 1)
}
print (MakeBirthdayIntro(my.name, my.age, my.birthday))
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (MakeIntroduction(name, age), "In", (my.birthday - today) ,"days I'll be", (my.age + 1))
}
print (MakeBirthdayIntro(my.name, my.age, my.birthday))
my.birthday <- as.Date("2018,07,29", "%Y-%m-%d")
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (MakeIntroduction(name, age), "In", (my.birthday - today) ,"days I'll be", (my.age + 1))
}
print (MakeBirthdayIntro(my.name, my.age, my.birthday))
abd <- paste(my.birthday - today)
print (abd)
spring.break <- as.Date ( "2018-03-17", "%Y-%m-%d")
today <- Sys.Date()
# Produces the time difference of today and the first day of 2018 spring break
days.to.break <- spring.break - today
print(days.to.break)
#
my.birthday <- as.Date( "2018,07,29", "%Y-%m-%d")
abd <- paste(my.birthday - today)
print (abd)
my.birthday <- as.Date( "2018-07-29", "%Y-%m-%d")
abd <- paste(my.birthday - today)
print (abd)
MakeBirthdayIntro <- function (name, age, date) {
intro <- paste (MakeIntroduction(name, age), "In", (my.birthday - today)
,"days I'll be", (my.age + 1))
}
print (MakeBirthdayIntro(my.name, my.age, my.birthday))
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
new.age <- (age + 1)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", new.age)
if (days.till< 1) {
days.till <- days.till +365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
my.birthday <- as.Date( "2018-01-01", "%Y-%m-%d")
abd <- paste(my.birthday - today)
print (abd)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
new.age <- (age + 1)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", new.age)
if (days.till< 1) {
days.till <- days.till +365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till< 1) {
days.till <- days.till +365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till< 1) {
days.till <- days.till +365
return(days.till)
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till< 1) {
days.till <- days.till +365
return(days.till)
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
if (days.till< 1) {
days.till <- days.till +365
return(days.till)
}
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till< 1) {
days.till <- days.till +365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till < 0) {
days.till <- days.till +365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till < 0) {
days.till <- days.till + 365
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
if (days.till < 0) {
days.till <- days.till + 365
return(days.till)
}
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
my.birthday <- as.Date( "2018-01-01", "%Y-%m-%d")
abd <- paste(my.birthday - today)
print (abd)
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (my.birthday - today)
if (days.till < 0) {
days.till <- days.till + 365
return(days.till)
}
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
my.birthday <- as.Date( "2018-01-01", "%Y-%m-%d")
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (date - today)
if (days.till < 0) {
days.till <- days.till + 365
return(days.till)
}
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
my.birthday <- as.Date( "2018-01-01", "%Y-%m-%d")
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (date - today)
if (days.till < 0) {
days.till <- days.till + 365
}
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
# Set my birthday
my.birthday <- as.Date( "2018-07-29", "%Y-%m-%d")
MakeBirthdayIntro <- function (name, age, date) {
days.till <- (date - today)
if (days.till < 0) {
days.till <- days.till + 365
}
intro.bday <- paste (MakeIntroduction(name, age), "In", days.till,"days I'll be", (age + 1))
return (intro.bday)
}
my.bday.intro <- MakeBirthdayIntro(my.name, my.age, my.birthday)
print (my.bday.intro)
layout <- fwf_widths(c(19,1,40,2,1,1,2,2,1,4,1,2,2,2,2,1,1,1,16,4,1,1,1,1,34,1,1,4,3,1,3,3,2,1,281,1,2,1,1,1,1,33,3,1,1),
col_names = c("drop1", "res_status", "drop2", "education_89", "education_03", "education_flag", "month",
"drop3", "sex", "detail_age", "age_flag", "age_recode", "age_recode2", "age_group",
"age_infant", "death_place", "marital", "day_of_week", "drop4", "data_year", "at_work",
"death_manner", "burial", "autopsy", "drop5", "activity", "injury_place",
"underlying_cause", "cause_recode358", "drop6", "cause_recode113", "cause_recode130",
"cause_recode39", "drop7", "multiple_causes", "drop8", "race", "race_bridged", "race_flag",
"race_recode", "race_recode2", "drop9", "hispanic", "drop10", "hispanic_recode"))
install.packages("data.table")
shiny::runApp('C:/Users/De'Roun's PC/OneDrive/INFO 201/a7-data-app-DeRoun')
shiny::runApp('C:/Users/De'Roun's PC/OneDrive/INFO 201/a7-data-app-DeRoun')
shiny::runApp('C:/Users/De'Roun's PC/OneDrive/INFO 201/a7-data-app-DeRoun')
shiny::runApp('C:/Users/De'Roun's PC/OneDrive/INFO 201/a7-data-app-DeRoun')
install.packages("shinythemes")
shiny::runApp('C:/Users/De'Roun's PC/OneDrive/INFO 201/StateLawsVGunDeath')
# Required Libraries:
suppressPackageStartupMessages(library(dplyr))
# Creates variable with raw Firearm Law Data
orig.GL <- read.csv(file = "data/raw_state_gun_laws_data.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Creates variable with raw Gun Death Data
orig.CDC <- read.csv(file = "data/raw_cdc_gun_deaths.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Simplifies CDC gun death data
simplify.CDC <- select(orig.CDC, State, Year, Deaths, Population)
# Simplifies firearm law data
simplify.GL <- select(orig.GL, State = state, Year = year, LawTotal = lawtotal)
# Combines CDC and Gun law datasets by state and year
combined.df <- left_join(simplify.CDC, simplify.GL)
# Adds a "All States" state category that takes the combined total of all states for that year.
allStates.df <- combined.df %>%
group_by(Year) %>%
summarise(Deaths = sum(Deaths), Population = sum(Population),
LawTotal = sum(LawTotal, na.rm=TRUE)) %>%
mutate(State = "All States")
# Adds the new "All States" rows to the combined data frame and creates a Rate column
# of the rate of death per 100,000 people
final.df <- full_join(combined.df, allStates.df) %>%
mutate(Rate = round(Deaths / Population * 100000, digits = 2))
# Vectors and other variables to be used in Shiny
year.vec <- c(allStates.df$Year)
setwd("C:/Users/De'Roun's PC/OneDrive/INFO 201/StateLawsVGunDeath")
shiny::runApp()
# Required Libraries:
suppressPackageStartupMessages(library(dplyr))
# Creates variable with raw Firearm Law Data
orig.GL <- read.csv(file = "data/raw_state_gun_laws_data.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Creates variable with raw Gun Death Data
orig.CDC <- read.csv(file = "data/raw_cdc_gun_deaths.csv", stringsAsFactor = F, fileEncoding="UTF-8-BOM")
# Simplifies CDC gun death data
simplify.CDC <- select(orig.CDC, State, Year, Deaths, Population)
# Simplifies firearm law data
simplify.GL <- select(orig.GL, State = state, Year = year, LawTotal = lawtotal)
# Combines CDC and Gun law datasets by state and year
combined.df <- left_join(simplify.CDC, simplify.GL)
# Adds a "All States" state category that takes the combined total of all states for that year.
allStates.df <- combined.df %>%
group_by(Year) %>%
summarise(Deaths = sum(Deaths), Population = sum(Population),
LawTotal = sum(LawTotal, na.rm=TRUE)) %>%
mutate(State = "All States")
# Adds the new "All States" rows to the combined data frame and creates a Rate column
# of the rate of death per 100,000 people
final.df <- full_join(combined.df, allStates.df) %>%
mutate(Rate = round(Deaths / Population * 100000, digits = 2))
# Vectors and other variables to be used in Shiny
year.vec <- c(allStates.df$Year)
runApp()
runApp()
runApp()
runApp()
devtools::install_github("cttobin/ggthemr")
runApp()
runApp()
library("ggthemr")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('andrewsali/shinycssloaders')
runApp()
install.packages("digest")
install.packages("digest")
shiny::runApp()
runApp()
options(spinner.color = "#de2d26")
suppressPackageStartupMessages(library("shinycssloaders"))
library("shinycssloaders")
(library("leaflet")
runApp()
runApp()
setwd("C:/Users/De'Roun's PC/OneDrive/INFO 201/StateLawsVGunDeath")
setwd("C:/Users/De'Roun's PC/OneDrive/INFO 201/StateLawsVGunDeath")
runApp()
